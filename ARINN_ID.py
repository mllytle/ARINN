'''
AI/ML model to detect atmospheric river from TPW images on the US west coast region.
Mobilenet V2 is used and top layer trained.

Original model was for cat detection from:  
    Sebastiaan Math√¥t  https://www.youtube.com/watch?v=8LjK4knsTRQ&t=943s

Modifications made by Clarence Lam and Changyong Cao, 7/21/2022
ATMS TPW training data generated by Yan Bai.


To be expaned to AR detection from Smallsat by Lapenta Intern Madison Lytle.

Mobilenet V2 was also previously used in urban nightlight study in Cao et al. 2022 (https://www.mdpi.com/2072-4292/14/13/3126) 

'''

import tensorflow as tf
from keras.applications.mobilenet_v2 import MobileNetV2, preprocess_input, decode_predictions
from keras.layers import Dense
from keras import Model
import numpy as np
#from imageio.v2 import imread
from imageio import imread
from matplotlib import pyplot as plt


#
from skimage.transform import resize

from pathlib import Path

#basepath = '/home/user1/AtmosphericRiver/Each50/'
basepath = '/media/madison/PASSPORTBLU/sorted_croped_SHORT'
	#'/n/viirs5/ccao/AI/AR/Each50/'

model = MobileNetV2(weights='imagenet')#check.

AR = list(Path(basepath).glob("AR/*pngcrop.png"))
NO = list(Path(basepath).glob("NO/*pngcrop.png"))

all_files = AR + NO

data = np.empty((len(all_files), 224, 224, 3))

for i, filepath in enumerate(all_files):
	im = imread(filepath)
	im = im[:,:,:3] # crop borders, remove alpha value
	im = preprocess_input(im)
	im = resize(im, output_shape=(224,224))
	data[i] = im

labels = np.empty(len(all_files), dtype=int)
labels[:len(AR)] = 0 #0 to len(AR)
labels[len(AR):] = 1 #len(AR) to end

"""
predictions = model.predict(data)
for decoded_prediction in decode_predictions(predictions, top=1):
	for name, desc, score in decoded_prediction:
		print(f"{desc} ({score}%)")
"""

def create_model(model):
	new_output = Dense(2, activation='softmax') #layer with 2 output
	new_output = new_output(model.layers[-2].output) #-2 layer replacing last layer

	new_input = model.input
	new_model = Model(inputs=new_input, outputs=new_output)
	# new_model.compile(..., run_eagerly=True) #added***

	for layer in new_model.layers[:-1]: #only train the last layer.
		layer.trainable = False

	new_model.compile(
		optimizer='adam',
		loss='sparse_categorical_crossentropy',
		metrics=['accuracy']
	)
	return new_model

new_model = create_model(model)

# new_model.summary()
new_model.fit(x=data, y=labels, epochs=30, verbose=2)
#then predict:
predictions = new_model.predict(data)
print('Should be AR (0)')
print(np.argmax(predictions[:len(AR)], axis=1))
print('Should be NO (1)')
print(np.argmax(predictions[len(AR):], axis=1))

#throw at me a input image, I will try to tell you whether it has atmospheric river (AR) in it:

#readin the image:
import sys


while 1<2:
    var=input("Enter file name to be checked:") # ***
    filepath= '/media/madison/PASSPORTBLU/sorted_croped/'+var
		# AR/mirs_adv_npoess_npp_atms_glb_20200619_tpw_all_as.pngcrop.png'
		# '/media/data13/ybai/tpw_npp/croped/'+var
    print(filepath)

    im = imread(filepath)
    im = im[:,:,:3] # crop borders, remove alpha value
    im = preprocess_input(im)
    im = resize(im, output_shape=(224,224))

    testdata = np.empty((1, 224, 224, 3))

    plt.imshow(im)
    plt.show()
    testdata[0]=im
    print('This is what I think: 0=AR, 1=NO')
    print(np.argmax(new_model.predict(testdata), axis=1))

'''

# Save the entire model as a SavedModel.
#!mkdir -p saved_model

model.save('saved_model/ar_model2')

ar_model2 = tf.keras.models.load_model('saved_model/ar_model2')

ar_model2.compile(
		optimizer='adam',
		loss='sparse_categorical_crossentropy',
		metrics=['accuracy']
)

# Check its architecture
ar_model2.summary()
'''


